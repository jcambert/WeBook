using System;
using MicroS_Common.Mongo;


using WeCommon;
using MongoDB.Bson.Serialization.Attributes;
using MicroS_Common.Types;

/// <summary>
/// This file was generated by the yeoman generator "generator-micros"
/// @author: Ambert Jean-Christophe
/// @email: jc.ambert@free.fr
/// @created_on: Sun Jul 12 2020 17:12:03 GMT+0200 (GMT+02:00)
/// </summary>
namespace webook.domain.proprietes.Domain
{
    [MongoDocument(COLLECTION_NAME)]
    public partial class Propriete : BaseEntity
    {
        public const string COLLECTION_NAME = "propriete";
        #region private variables


        #endregion

        #region public properties
        [BsonElement("nom"),BsonRequired]
        public string Nom { get; set; }
        [BsonElement("telephone"),BsonIgnoreIfNull]
        public string Telephone { get; set; }
        [BsonElement("fax"), BsonIgnoreIfNull]
        public string Fax { get; set; }
        [BsonElement("email"),BsonRequired]
        public string Email { get; set; }
        [BsonElement("web")]
        public string SiteWeb { get; set; }
        [BsonElement("nomcon"),BsonRequired]
        public string NomDuContact { get; set; }
        [BsonElement("precon")]
        public string PrenomDuContact { get; set; }
        [BsonElement("devise"),BsonRequired]
        public string Devise { get; set; }
        [BsonElement("symbavantprix")]
        public string SymboleDeDeviseAvantLePrix { get; set; }
        [BsonElement("symbapresprix")]
        public string SymboleDeDeviseApresLePrix { get; set; }
        [BsonElement("typloc")]
        public string TypeDeLocation { get; set; }
        [BsonElement("idaut")]
        public string IdentifiantAutorite { get; set; }
        [BsonElement("ordre")]
        public int OrdreAffichage { get; set; }

        [BsonElement("polgen"), BsonSerializer(typeof(DynamicSerializer<dynamic, string>))]
        public dynamic PolitiqueGenerale { get; set; } = new Property<string>();
        [BsonElement("polann"), BsonSerializer(typeof(DynamicSerializer<dynamic, string>))]
        public dynamic PolitiqueAnnulation { get; set; } = new Property<string>();
        [BsonElement("adres"), BsonRequired]
        public Adresse Adresse{ get; set; }
        #endregion

        #region Constructeur
        public Propriete() : base() { }

        public Propriete(string nom, string telephone, string fax, string email, string siteweb, string nomducontact, string prenomducontact, string devise, string symbolededeviseavantleprix, string symbolededeviseapresleprix, string typedelocation, string identifiantautorite, int ordreaffichage, Property<string> politiquegenerale, Property<string> politiqueannulation, Adresse adresse)
            : base()
        {
            Nom = nom;
            Telephone = telephone;
            Fax = fax;
            Email = email;
            SiteWeb = siteweb;
            NomDuContact = nomducontact;
            PrenomDuContact = prenomducontact;
            Devise = devise;
            SymboleDeDeviseAvantLePrix = symbolededeviseavantleprix;
            SymboleDeDeviseApresLePrix = symbolededeviseapresleprix;
            TypeDeLocation = typedelocation;
            IdentifiantAutorite = identifiantautorite;
            OrdreAffichage = ordreaffichage;
            PolitiqueGenerale = politiquegenerale;
            PolitiqueAnnulation = politiqueannulation;
            Adresse = adresse;
        }

        #endregion

        #region public functions
        #endregion

    }
}
